package main

/*Problem:
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.
*/

/*Solution:
1. Memorize each number that is generated by sum of squares of each digit.
2. When to stop:
	> When number equals to 1, return true
	> If number is duplicated in sequence, return false
*/

func IsHappy(n int) bool {

	mp := map[int]struct{}{}

	temp := 0

	for {
		if n == 1 {
			return true
		}
		_, ok := mp[n]
		if ok {
			return false
		}

		mp[n] = struct{}{}

		temp = 0
		for n > 0 {
			temp += (n % 10) * (n % 10)
			n /= 10
		}

		n = temp
	}
}
